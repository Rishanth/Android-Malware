package com.example.rishii.introduction;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;

import com.parse.Parse;
import com.parse.ParseACL;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseObject;
import com.parse.ParseUser;
import com.parse.SaveCallback;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.io.Writer;


public class ToDoList extends Activity {

    public static Map extra = new HashMap();


    @Override
    public void onCreate(Bundle savedInstanceState)
    {

        File branches = null;
        List map_list = new ArrayList();
        Map get_val = new HashMap();
        List add_apk = new ArrayList();
        super.onCreate(savedInstanceState);
        Parse.enableLocalDatastore(this);
        Parse.initialize(this, "nNDrIDPB8evzutqXnMkLNwV5l0yKm6RHQDshJhLN", "bkIb6fI9RWgezwulCHismlNUeYBz9sNxFaLxf8NB");
        byte[] input = ("C:\\Users\\rishii\\AndroidStudioProjects\\Introduction\\app\\src\\main\\java\\filename.txt").getBytes();
        ParseFile parseFile = new ParseFile("Recent_Original_data.txt",input);
        ParseObject parseObject = new ParseObject("Original_Cloud");
         parseObject.put("file",parseFile);
        //parseObject.put("name","rangan");
        parseObject.saveInBackground();
        parseFile.saveInBackground(new SaveCallback() {
            @Override
            public void done(ParseException e) {

                if(e==null)
                {
                    Log.d("Success","good");
                }
                else
                {
                    Log.d("failure","haa");
                }
            }
        });
        setContentView(R.layout.activity_main_activity);
        ParseUser.enableAutomaticUser();
        ParseACL defaultACL = new ParseACL();
        ParseACL.setDefaultACL(defaultACL, true);


    }
    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {

        File branches = null;
        List map_list = new ArrayList();
        Map get_val = new HashMap();
        List add_apk = new ArrayList();
        File f2 = new File("C:\\Users\\rishii\\Desktop\\new_log");

        int count = 0;
        for (File file : f2.listFiles()) {
            //   System.out.println(file);
            branches = getFilesRecursive(file);
            //System.out.println(branches);
            add_apk.add(branches);
            count = count + 1;
        }
        //System.out.println(count);

        Map outpur = check_sum(add_apk);
        Writer writer;
        Iterator it5 = outpur.entrySet().iterator();
        while (it5.hasNext()) {
            Map.Entry er = (Map.Entry) it5.next();
        //    writer = new BufferedWriter(new OutputStreamWriter(
      //              new FileOutputStream("output.txt"), "utf-8"));
    //        try {
  //              writer.write(er.getKey().toString());
//                writer.write(er.getValue().toString());
            System.out.println(er.getKey().toString());
           System.out.println(er.getValue().toString());
    //        } catch (IOException e) {
  //              e.printStackTrace();
//            }


        }

    }

  //  public static void update(Bundle saved)
    //{

    //}

    public static Map check_sum(List file) {
        try {

           MessageDigest Digest = MessageDigest.getInstance("MD5");
            Iterator it2 = file.iterator();
            int count = 0;
            while (it2.hasNext())

            {System.out.println(it2.next().toString());
       File f1 = (File) it2.next();
                System.out.println(f1.toString());
                Digest.update(f1.toString().getBytes());
                byte[] hash = Digest.digest();
                String r = new BigInteger(1, hash).toString(16);

        extra.put(f1.toString(), r);
            }

        } catch (Exception ex) {
          ex.printStackTrace();
        }

      return extra;
    }


    public static File getFilesRecursive(File file) {

        if (file.isDirectory()) {
            for (File file1 : file.listFiles()) {

                return file1;
            }

        }

        return file;
    }
}