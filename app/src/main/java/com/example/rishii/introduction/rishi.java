package com.example.rishii.introduction;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.os.Handler;
import android.os.SystemClock;
import android.support.v7.app.ActionBarActivity;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;
import com.google.common.base.Stopwatch;
import com.parse.GetCallback;
import com.parse.GetDataCallback;
import com.parse.ParseException;
import com.parse.ParseFile;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.StringTokenizer;
import java.io.*;

public class rishi extends ActionBarActivity {

    private Context context;
    private ProgressDialog progress;
   // private long startTime;
    private long endTime;
    java.util.Date date= new java.util.Date();
    private long fileSize = 0;
    byte[] input_bytes;
    String values;
    String values1;
    String values2;
    String values3;
    String values4;
    final Map map = new HashMap<>();
    final Map input_map = new HashMap<>();
    final ArrayList<String> ar = new ArrayList();
    final String arr[] = new String[10000];
    SQLiteDatabase db;
    ProgressDialog progressBar;


    private int progressBarStatus = 0;
    private Handler progressBarHandler = new Handler();

    EditText user, pwd;
    Session ses;
    Alert_Dialouge alert = new Alert_Dialouge();

    protected void onCreate(Bundle savedInstanceState) {
        context = this;
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main2);
        final ArrayList ar = new ArrayList();
        ses = new Session(getApplicationContext());

        Button next = (Button) findViewById(R.id.logout);
        next.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ses.logoutUser();
            }
        });



        addListenerOnButton();
    }

    public void addListenerOnButton() {

        //Stopwatch timer = new Stopwatch().start();

        Button progress_val = (Button) findViewById(R.id.scanit);
        progress_val.setOnClickListener(new View.OnClickListener() {


            @Override
            public void onClick(final View v) {

                final long startTime = SystemClock.elapsedRealtime();

                final ParseQuery<ParseObject> query = ParseQuery.getQuery("Cloud_data");

                query.getInBackground("U7ez5YtyZk",
                        new GetCallback<ParseObject>() {
                            public void done(ParseObject object, ParseException e) {
                                if (e == null) {

                                    try {

                                        InputStream XmlFileInputStream = getResources().openRawResource(R.raw.file_input_val);
                                        input_bytes = readTextFile(XmlFileInputStream);
                                        ParseFile parseFile = object.getParseFile("file");
                                        parseFile.getDataInBackground(
                                                new GetDataCallback() {
                                                    public void done(byte[] data, ParseException e) {
                                                        if (e == null) {

                                                            String new_val = "";
                                                            StringBuffer stringBuffer = new StringBuffer();

                                                            try {
                                                                String s = new String(data);
                                                                String string = new String(input_bytes);
                                                                StringTokenizer stringTokenizer = new StringTokenizer(s);
                                                                java.util.Date date = new java.util.Date();
                                                                StringTokenizer input_stringTokenizer = new StringTokenizer(string);

                                                                while (stringTokenizer.hasMoreTokens()) {
                                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());

                                                   /* map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
                                                    map.put(stringTokenizer.nextToken(), stringTokenizer.nextToken());
*/

                                                                }

                                                              /*  Iterator it = map.entrySet().iterator();
                                                                while (it.hasNext())
                                                                {
                                                                    Map.Entry m1 = (Map.Entry)it.next();
                                                                    System.out.println("map_key"+m1.getKey());
                                                                    System.out.println("map_value"+m1.getValue());

                                                                }*/
                                                                while (input_stringTokenizer.hasMoreTokens()) {
                                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
/*
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());
                                                    input_map.put(input_stringTokenizer.nextToken(), input_stringTokenizer.nextToken());


*/
                                                                }
                                                            } catch (Exception e1) {
                                                                e1.printStackTrace();
                                                            }
                                                        }


                                                        Iterator it = map.entrySet().iterator();
                                                        while (it.hasNext()) {
                                                            Map.Entry r = (Map.Entry) it.next();
                                                            Map.Entry r1 = (Map.Entry) it.next();
                                                            Map.Entry r2 = (Map.Entry) it.next();
                                                            Map.Entry r3= (Map.Entry)it.next();
                                                            Map.Entry r4= (Map.Entry)it.next();
                                                            Object key = r.getKey();
                                                            Object key_1 = r1.getKey();
                                                            Object key_2 = r2.getKey();
                                                            Object key_3= r3.getKey();
                                                            Object key_4 = r4.getKey();

                                                            if (input_map.containsKey(key)
                                                                    &&
                                                                    input_map.containsKey(key_1)
                                                                    &&
                                                                    input_map.containsKey(key_2)
                                                                    &&
                                                                    input_map.containsKey(key_3)
                                                                    &&
                                                                    input_map.containsKey(key_4)
                                                                    )
                                                            {

                                                                if (map.get(key).equals(input_map.get(key)))
                                                                {
                                                                    System.out.println("hii!done");
                                                                }
                                                                if (map.get(key_1).equals(input_map.get(key_1)))
                                                                {
                                                                    System.out.println("hii!done2");
                                                                }
                                                                if (map.get(key_2).equals(input_map.get(key_2)))
                                                                {
                                                                    System.out.println("hii!done3");
                                                                }
                                                                if (map.get(key_3).equals(input_map.get(key_3)))
                                                                {
                                                                    System.out.println("hii!done4");
                                                                }
                                                                if (map.get(key_4).equals(input_map.get(key_4)))
                                                                {
                                                                    System.out.println("hii!done5");
                                                                }
                                                                else if(map.get(key_4)!=input_map.get(key_4))
                                                                {
                                                                    System.out.println("Matching Key" + key_4);
                                                                    System.out.println("Matching key_1" + map.get(key_4));
                                                                    System.out.println("Matching key_2" + input_map.get(key_4));
                                                                    values4 = key_4.toString().substring(key_4.toString().lastIndexOf("\\") + 1);
                                                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                                                                            context);
                                                                    alertDialogBuilder.setTitle("Malware found");
                                                                    alertDialogBuilder
                                                                            .setMessage(values4)
                                                                            .setCancelable(false)
                                                                            .setNegativeButton("Exit", new DialogInterface.OnClickListener() {
                                                                                public void onClick(DialogInterface dialog, int id)
                                                                                {
                                                                                    dialog.cancel();
                                                                                }
                                                                            });
                                                                    AlertDialog alertDialog = alertDialogBuilder.create();
                                                                    alertDialog.show();

                                                                }


                                                                else if(map.get(key_3)!=input_map.get(key_3))
                                                                {
                                                                    System.out.println("Matching Key" + key_3);
                                                                    System.out.println("Matching key_1" + map.get(key_3));
                                                                    System.out.println("Matching key_2" + input_map.get(key_3));
                                                                    values3 = key_3.toString().substring(key_3.toString().lastIndexOf("\\") + 1);
                                                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                                                                            context);
                                                                    alertDialogBuilder.setTitle("Malware found");
                                                                    alertDialogBuilder
                                                                            .setMessage(values3)
                                                                            .setCancelable(false)
                                                                            .setNegativeButton("Exit", new DialogInterface.OnClickListener() {
                                                                                public void onClick(DialogInterface dialog, int id) {
                                                                                    // if this button is clicked, just close
                                                                                    // the dialog box and do nothing
                                                                                    dialog.cancel();
                                                                                }
                                                                            });
                                                                    AlertDialog alertDialog = alertDialogBuilder.create();
                                                                    alertDialog.show();

                                                                }
                                                                else if (map.get(key_2) != input_map.get(key_2))
                                                                {

                                                                    System.out.println("Matching Key" + key_2);
                                                                    System.out.println("Matching key_1" + map.get(key_2));
                                                                    System.out.println("Matching key_2" + input_map.get(key_2));

                                                                    values2 = key_2.toString().substring(key_2.toString().lastIndexOf("\\") + 1);
                                                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                                                                            context);
                                                                    alertDialogBuilder.setTitle("Malware found");
                                                                    alertDialogBuilder
                                                                            .setMessage(values2)
                                                                            .setCancelable(false)
                                                                            .setNegativeButton("Exit", new DialogInterface.OnClickListener() {
                                                                                public void onClick(DialogInterface dialog, int id) {
                                                                                    // if this button is clicked, just close
                                                                                    // the dialog box and do nothing
                                                                                    dialog.cancel();
                                                                                }
                                                                            });
                                                                    AlertDialog alertDialog = alertDialogBuilder.create();
                                                                    alertDialog.show();
                                                                }


                                                                else if (map.get(key_1) != input_map.get(key_1))
                                                                {

                                                                    System.out.println("Matching Key" + key_1);
                                                                    System.out.println("Matching key_1" + map.get(key_1));
                                                                    System.out.println("Matching key_2" + input_map.get(key_1));
                                                                    values1 = key_1.toString().substring(key_1.toString().lastIndexOf("\\") + 1);
                                                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                                                                            context);
                                                                    alertDialogBuilder.setTitle("Malware found");
                                                                    alertDialogBuilder
                                                                            .setMessage(values1)
                                                                            .setCancelable(false)
                                                                            .setNegativeButton("Exit", new DialogInterface.OnClickListener() {
                                                                                public void onClick(DialogInterface dialog, int id)
                                                                                {
                                                                                    dialog.cancel();
                                                                                }
                                                                            });
                                                                    AlertDialog alertDialog = alertDialogBuilder.create();
                                                                    alertDialog.show();
                                                                }

                                                                else if (map.get(key) != input_map.get(key))
                                                                {

                                                                    System.out.println("Matching Key" + key);
                                                                    System.out.println("Matching key_1" + map.get(key));
                                                                    System.out.println("Matching key_2" + input_map.get(key));

                                                                    values = key.toString().substring(key.toString().lastIndexOf("\\") + 1);
                                                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
                                                                            context);
                                                                    alertDialogBuilder.setTitle("Malware found");
                                                                    alertDialogBuilder
                                                                            .setMessage(values)
                                                                            .setCancelable(false)
                                                                            .setNegativeButton("Exit", new DialogInterface.OnClickListener() {
                                                                                public void onClick(DialogInterface dialog, int id) {
                                                                                    dialog.cancel();
                                                                                }
                                                                            });
                                                                    AlertDialog alertDialog = alertDialogBuilder.create();
                                                                    alertDialog.show();
                                                                }

                                                            }
                                                            else
                                                            {

                                                                System.out.println("bye");

                                                            }

                                                        }
                                                        long endTime = SystemClock.elapsedRealtime();
                                                        long elapsedMilliSeconds = endTime - startTime;
                                                        double elapsedSeconds = elapsedMilliSeconds / 1000.0;
                                                        System.out.println("elapsed_time" + elapsedSeconds + "seconds");
                                                    }


                                                });

                                    } catch (Exception e1)

                                    {
                                        e1.printStackTrace();
                                    }
                                }

                            }
                        });
            }


            public int doSomeTasks(int size) {

                while (fileSize <= size) {
                    fileSize++;

                    if (fileSize == 4) {
                        return 10;
                    } else if (fileSize == 12) {
                        return 20;
                    } else if (fileSize == 16) {
                        return 70;
                    } else if (fileSize == 20) {
                        return 90;
                    }

                }
                return 100;

            }


            public byte[] readTextFile(InputStream inputStream) throws IOException {
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                byte buf[] = new byte[inputStream.available()];
                inputStream.read(buf);
                return buf;

            }


        });


    }


}
